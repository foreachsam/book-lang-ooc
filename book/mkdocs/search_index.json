{
    "docs": [
        {
            "location": "/",
            "text": "ooc \u5b78\u7fd2\u7b46\u8a18\n\n\n\u9019\u662f\u5b78\u7fd2\u300c\nooc\n\u300d\u7684\u7c21\u55ae\u7d00\u9304\u3002\n\n\n\u74b0\u5883\n\n\n\n\nXubuntu 16.04 64\u4f4d\u5143",
            "title": "\u9996\u9801"
        },
        {
            "location": "/#ooc",
            "text": "\u9019\u662f\u5b78\u7fd2\u300c ooc \u300d\u7684\u7c21\u55ae\u7d00\u9304\u3002",
            "title": "ooc \u5b78\u7fd2\u7b46\u8a18"
        },
        {
            "location": "/#_1",
            "text": "Xubuntu 16.04 64\u4f4d\u5143",
            "title": "\u74b0\u5883"
        },
        {
            "location": "/content/reference/manual/",
            "text": "manual\n\n\n\u95b1\u8b80\u6587\u4ef6\n\n\n\n\nooc / \nDocumentation\n\n\nGitHub / ooc-lang / ooc-lang.github.io / \ndocs\n\n\nGitHub / ooc-lang / \nthe-ooc-language",
            "title": "manual"
        },
        {
            "location": "/content/reference/manual/#manual",
            "text": "",
            "title": "manual"
        },
        {
            "location": "/content/reference/manual/#_1",
            "text": "ooc /  Documentation  GitHub / ooc-lang / ooc-lang.github.io /  docs  GitHub / ooc-lang /  the-ooc-language",
            "title": "\u95b1\u8b80\u6587\u4ef6"
        },
        {
            "location": "/content/command/rock/",
            "text": "rock command\n\n\n\u5b89\u88dd\u65b9\u5f0f\n\n\n\u8acb\u53c3\u8003\u300c\n\u5b98\u7db2\u9019\u7bc7\n\u300d\uff0c\u5f9e\u300c\nInstalling from Git\n\u300d\u90a3\u958b\u59cb\u3002\n\n\n\u89c0\u770b help\n\n\n\u57f7\u884c\n\n\n$ rock --help\n\n\n\n\n\u6216\u662f\u57f7\u884c\n\n\n$ rock -h\n\n\n\n\n\u986f\u793a\n\n\nUsage: rock [options] files\n\nThe default rock options are:\nrock yourmodule.ooc -backend=c -driver=sequence -gc=static -libcache -outpath=rock_tmp/ -o=yourmodule\n\nIf you give it no .ooc file, rock will attempt to find a .use file, and\ncompile it either as a program (if it has a 'Main: yourapp.ooc' directive)\nor a library (if it only has a 'SourcePath: something' directive)\n\n--allerrors\n    Attempt to display all compilation errors instead of stopping after\n    the first one. The reason this is optional is because the output of\n    allerrors is sometimes not so helpful. You might want to pipe it to less :)\n\n--backend=[c,json,luaffi]\n    Choose the rock backend. By default, the 'c' backend is used. 'json'\n    generates a JSON representation of the AST, and 'luaffi' generate .lua\n    boilerplate to help using ooc module from Lua with ooc-lua.\n\n-c\n    Don't link.\n\n--cc=[/path/to/ccompiler/binary]\n    point to the C compilers executable\n\n--driver=[combine,sequence,make,cmake,dummy]\n    Choose the compile driver to use. combine compiles all C files\n    combined, sequence compiles them sequentially, make creates a\n    Makefile, cmake creates a CMakeList.txt for CMake. dummy only\n    generates the .c sources to rock_tmp/ (or whatever you set your\n    -outpath to)\n\n-Dmydefine\n    sets \nmydefine\n for version blocks\n\n--editor=EDITOR\n    The editor to run when an error in a ooc file was encountered.\n\n--entrypoint=FUNC\n    Use FUNC as entrypoint. (default=main)\n\n-pg\n    Use the 'debug profile' - compile with debug information and no optimization.\n\n-pr\n    Use the 'release profile' - produce optimized code.\n\n-O0, -O1, -O2, -O3, -Os\n    Choose an optimization level\n\n-pipe\n    Use pipes rather than temporary files for communication between the\n    various stages of compilation.\n\n--gc=[dynamic,static,off]\n    Link dynamically, link statically, or don't link with the boehm\n    GC at all.\n\n-h, --help\n    Print this help and exit.\n\n-IPATH, -incpath=PATH\n    Add PATH to the C header search path.\n\n--libcache, --nolibcache\n    Use (or not) a library cache. By default, rock compiles related\n    bunches of .ooc files to a static library for further compilation\n    processes speedups in the .libs/ directory. When the source files\n    change, the static library will be recompiled automatically.\n    However, if you want to turn off library caching for some reason,\n    use this option.\n\n--libs=path/to/libs\n    Specify the path where you keep all your ooc libraries, with .use files\n    in them so it's easy to use them! You can also use the OOC_LIBS environment\n    variable.\n\n--use=some-ooc-lib\n    Add `use some-ooc-lib` to the start of the main module file so it's accessible.\n    Used by sam to insert its builtin assertion library for example.\n\n--linker=LINKER\n    Use LINKER in the last step of the sequence driver.\n\n-lLIB\n    Link with library LIB.\n\n-LPATH, -libpath=PATH\n    Add PATH to the C library search path.\n\n--mARCH\n    Specify the architecture (either 32 or 64).\n\n--noclean\n    Don't delete any temporary file produced by the backend, useful\n    for debugging.\n\n--nohints\n    Don't even try to be helpful, ie. give hints when it encounters an error.\n    Use it if you're so ass-tight you can't even take a little hint once in a while.\n\n--nomain\n    Don't write a default main function.\n\n--nolines\n    Print no lines directives to the C files. Use it if you want to debug\n    using .c files line numbers, not .ooc files line numbers.\n\n--onlycheck\n    Parse the given source files and its dependencies, check everything,\n    but don't generate C files.\n\n--onlygen\n    Equivalent to -driver=dummy. See above.\n\n--onlyparse\n    Only parse the given source file, fail on syntax errors only.\n\n--outpath=PATH\n    Place all .c and .h files in PATH. (default=rock_tmp/)\n\n-q, --quiet\n    Makes rock shut up. Disables any previous shout, verbose, veryVerbose.\n\n-r, --run\n    Run the executable after a successful compilation.\n\n--shout\n    Print a big fat status indicator (usually [ OK ] or [FAIL]) when a build\n    process is finished.\n\n--sourcepath=PATH\n    Pass the location of your source files. (default=current\n    directory)\n\n-v, --verbose\n    Print more information during the build process, useful for\n    debugging.\n\n-vv, --veryVerbose\n    Print even more information! -vv implies -v.\n\n-V, --version\n    Print rock's version and exit.\n\n+...\n    Pass extra arguments to the compiler. Example: +-Wall will pass\n    -Wall to gcc.\n\nADVANCED OPTIONS\n----------------\n\n--blowup=ROUNDS\n    Terminate rock after ROUNDS tinkerer rounds. (default=32)\n\n--ignoredefine=SYMBOL\n    rock remembers command-line options to know if it has to recompile some files. But\n    some symbols, e.g. -DBUILD_DATE and stuff like this, shouldn't count when evaluating\n    if a recompile is needed, because they change all the time. Use ignoredefine to\n    ignore them when comparing build states.\n\n--debuglibcache\n    Print debug message about libcache (might help in case of weird C compiler errors\n    about missing files and the such)\n\n--debugloop\n    Print debug messages about the resolving loop (might help in case of blowup)\n\n--inline\n    Enable generic inlining (EXPERIMENTAL, it will eat your dog)\n\n--libcachepath=path\n    Specify an explicit path where to store libcache files\n\n--newstr\n    Use the String class to store normal string literals, not C strings\n\n--no-inline\n    Disable generic inlining\n\n--nolang\n    Don't include 'lang/' by default. Here be dragons!\n\n-t, --timing\n    Print how much time the compilation took.\n\n\n\n\n\u89c0\u770b\u7248\u672c\n\n\n\u57f7\u884c\n\n\n$ rock --version\n\n\n\n\n\u6216\u662f\u57f7\u884c\n\n\n$ rock -V\n\n\n\n\n\u986f\u793a\n\n\nrock 0.9.11-head codename sapporo, built on Sat Sep 17 07:53:40 2016",
            "title": "rock"
        },
        {
            "location": "/content/command/rock/#rock-command",
            "text": "",
            "title": "rock command"
        },
        {
            "location": "/content/command/rock/#_1",
            "text": "\u8acb\u53c3\u8003\u300c \u5b98\u7db2\u9019\u7bc7 \u300d\uff0c\u5f9e\u300c Installing from Git \u300d\u90a3\u958b\u59cb\u3002",
            "title": "\u5b89\u88dd\u65b9\u5f0f"
        },
        {
            "location": "/content/command/rock/#help",
            "text": "\u57f7\u884c  $ rock --help  \u6216\u662f\u57f7\u884c  $ rock -h  \u986f\u793a  Usage: rock [options] files\n\nThe default rock options are:\nrock yourmodule.ooc -backend=c -driver=sequence -gc=static -libcache -outpath=rock_tmp/ -o=yourmodule\n\nIf you give it no .ooc file, rock will attempt to find a .use file, and\ncompile it either as a program (if it has a 'Main: yourapp.ooc' directive)\nor a library (if it only has a 'SourcePath: something' directive)\n\n--allerrors\n    Attempt to display all compilation errors instead of stopping after\n    the first one. The reason this is optional is because the output of\n    allerrors is sometimes not so helpful. You might want to pipe it to less :)\n\n--backend=[c,json,luaffi]\n    Choose the rock backend. By default, the 'c' backend is used. 'json'\n    generates a JSON representation of the AST, and 'luaffi' generate .lua\n    boilerplate to help using ooc module from Lua with ooc-lua.\n\n-c\n    Don't link.\n\n--cc=[/path/to/ccompiler/binary]\n    point to the C compilers executable\n\n--driver=[combine,sequence,make,cmake,dummy]\n    Choose the compile driver to use. combine compiles all C files\n    combined, sequence compiles them sequentially, make creates a\n    Makefile, cmake creates a CMakeList.txt for CMake. dummy only\n    generates the .c sources to rock_tmp/ (or whatever you set your\n    -outpath to)\n\n-Dmydefine\n    sets  mydefine  for version blocks\n\n--editor=EDITOR\n    The editor to run when an error in a ooc file was encountered.\n\n--entrypoint=FUNC\n    Use FUNC as entrypoint. (default=main)\n\n-pg\n    Use the 'debug profile' - compile with debug information and no optimization.\n\n-pr\n    Use the 'release profile' - produce optimized code.\n\n-O0, -O1, -O2, -O3, -Os\n    Choose an optimization level\n\n-pipe\n    Use pipes rather than temporary files for communication between the\n    various stages of compilation.\n\n--gc=[dynamic,static,off]\n    Link dynamically, link statically, or don't link with the boehm\n    GC at all.\n\n-h, --help\n    Print this help and exit.\n\n-IPATH, -incpath=PATH\n    Add PATH to the C header search path.\n\n--libcache, --nolibcache\n    Use (or not) a library cache. By default, rock compiles related\n    bunches of .ooc files to a static library for further compilation\n    processes speedups in the .libs/ directory. When the source files\n    change, the static library will be recompiled automatically.\n    However, if you want to turn off library caching for some reason,\n    use this option.\n\n--libs=path/to/libs\n    Specify the path where you keep all your ooc libraries, with .use files\n    in them so it's easy to use them! You can also use the OOC_LIBS environment\n    variable.\n\n--use=some-ooc-lib\n    Add `use some-ooc-lib` to the start of the main module file so it's accessible.\n    Used by sam to insert its builtin assertion library for example.\n\n--linker=LINKER\n    Use LINKER in the last step of the sequence driver.\n\n-lLIB\n    Link with library LIB.\n\n-LPATH, -libpath=PATH\n    Add PATH to the C library search path.\n\n--mARCH\n    Specify the architecture (either 32 or 64).\n\n--noclean\n    Don't delete any temporary file produced by the backend, useful\n    for debugging.\n\n--nohints\n    Don't even try to be helpful, ie. give hints when it encounters an error.\n    Use it if you're so ass-tight you can't even take a little hint once in a while.\n\n--nomain\n    Don't write a default main function.\n\n--nolines\n    Print no lines directives to the C files. Use it if you want to debug\n    using .c files line numbers, not .ooc files line numbers.\n\n--onlycheck\n    Parse the given source files and its dependencies, check everything,\n    but don't generate C files.\n\n--onlygen\n    Equivalent to -driver=dummy. See above.\n\n--onlyparse\n    Only parse the given source file, fail on syntax errors only.\n\n--outpath=PATH\n    Place all .c and .h files in PATH. (default=rock_tmp/)\n\n-q, --quiet\n    Makes rock shut up. Disables any previous shout, verbose, veryVerbose.\n\n-r, --run\n    Run the executable after a successful compilation.\n\n--shout\n    Print a big fat status indicator (usually [ OK ] or [FAIL]) when a build\n    process is finished.\n\n--sourcepath=PATH\n    Pass the location of your source files. (default=current\n    directory)\n\n-v, --verbose\n    Print more information during the build process, useful for\n    debugging.\n\n-vv, --veryVerbose\n    Print even more information! -vv implies -v.\n\n-V, --version\n    Print rock's version and exit.\n\n+...\n    Pass extra arguments to the compiler. Example: +-Wall will pass\n    -Wall to gcc.\n\nADVANCED OPTIONS\n----------------\n\n--blowup=ROUNDS\n    Terminate rock after ROUNDS tinkerer rounds. (default=32)\n\n--ignoredefine=SYMBOL\n    rock remembers command-line options to know if it has to recompile some files. But\n    some symbols, e.g. -DBUILD_DATE and stuff like this, shouldn't count when evaluating\n    if a recompile is needed, because they change all the time. Use ignoredefine to\n    ignore them when comparing build states.\n\n--debuglibcache\n    Print debug message about libcache (might help in case of weird C compiler errors\n    about missing files and the such)\n\n--debugloop\n    Print debug messages about the resolving loop (might help in case of blowup)\n\n--inline\n    Enable generic inlining (EXPERIMENTAL, it will eat your dog)\n\n--libcachepath=path\n    Specify an explicit path where to store libcache files\n\n--newstr\n    Use the String class to store normal string literals, not C strings\n\n--no-inline\n    Disable generic inlining\n\n--nolang\n    Don't include 'lang/' by default. Here be dragons!\n\n-t, --timing\n    Print how much time the compilation took.",
            "title": "\u89c0\u770b help"
        },
        {
            "location": "/content/command/rock/#_2",
            "text": "\u57f7\u884c  $ rock --version  \u6216\u662f\u57f7\u884c  $ rock -V  \u986f\u793a  rock 0.9.11-head codename sapporo, built on Sat Sep 17 07:53:40 2016",
            "title": "\u89c0\u770b\u7248\u672c"
        }
    ]
}